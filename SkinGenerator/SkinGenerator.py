#This python script runs a gui app which allows for generation of minecraft skins
#with use of trained GAN

from torch import randn,load
import torch.nn as nn
from torchvision.utils import save_image

import os
os.environ["KIVY_NO_CONSOLELOG"] = "1"

from kivy.config import Config
Config.set('input', 'mouse', 'mouse,multitouch_on_demand')
#Config.set('graphics', 'resizable', True)

from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button 
from kivy.uix.slider import Slider
from kivy.uix.label import Label
from kivy.uix.behaviors import ButtonBehavior
from kivy.uix.image import Image
from kivy.core.image import Image as CoreImage
from kivy.core.window import Window

from PIL import Image as p_Image

import shutil
from io import BytesIO

#denormalize tensor generated by gan
def denorm(img_tensors,stats):
    return img_tensors * stats[1][0] + stats[0][0]
    
#format generated skins to display preview
def prepare_image_front(path):
    im=p_Image.open(path)
    head=im.crop((8,8,16,16))
    body=im.crop((20,20,28,32))
    arm_r=im.crop((44,20,48,32))
    arm_l=im.crop((36,52,40,64))
    leg_r=im.crop((4,20,8,32))
    leg_l=im.crop((20,52,24,64))
    res=p_Image.new(mode="RGB",size=(20,36),color=(0,0,0))
    res.paste(head,(6,2))
    res.paste(body,(6,10))
    res.paste(arm_r,(2,10))
    res.paste(arm_l,(14,10))
    res.paste(leg_r,(6,22))
    res.paste(leg_l,(10,22))
    res=res.resize((200,360),p_Image.NEAREST)
    return res

def prepare_image_back(path):
    im=p_Image.open(path)
    head=im.crop((24,8,32,16))
    body=im.crop((32,20,40,32))
    arm_r=im.crop((52,20,56,32))
    arm_l=im.crop((44,52,48,64))
    leg_r=im.crop((12,20,16,32))
    leg_l=im.crop((28,52,32,64))
    res=p_Image.new(mode="RGB",size=(20,36),color=(0,0,0))
    res.paste(head,(6,2))
    res.paste(body,(6,10))
    res.paste(arm_l,(2,10))
    res.paste(arm_r,(14,10))
    res.paste(leg_l,(6,22))
    res.paste(leg_r,(10,22))
    res=res.resize((200,360),p_Image.NEAREST)
    return res

def prepare_image_left(path):
    im=p_Image.open(path)
    head=im.crop((16,8,24,16))
    arm=im.crop((40,52,44,64))
    leg=im.crop((24,52,28,64))
    res=p_Image.new(mode="RGB",size=(20,36),color=(0,0,0))
    res.paste(head,(6,2))
    res.paste(arm,(8,10))
    res.paste(leg,(8,22))
    res=res.resize((200,360),p_Image.NEAREST)
    return res

def prepare_image_right(path):
    im=p_Image.open(path)
    head=im.crop((0,8,8,16))
    arm=im.crop((40,20,44,32))
    leg=im.crop((0,20,4,32))
    res=p_Image.new(mode="RGB",size=(20,36),color=(0,0,0))
    res.paste(head,(6,2))
    res.paste(arm,(8,10))
    res.paste(leg,(8,22))
    res=res.resize((200,360),p_Image.NEAREST)
    return res

#extensions of kivy widgets that have index field
class MainSlider(Slider):
    def __init__(self,index,**kwargs):
        super().__init__(**kwargs)
        self.index=index

class MoreButton(Button):
    def __init__(self,index,**kwargs):
        super().__init__(**kwargs)
        self.index=index


#main app class
class MainApp(App):

    #initialize misc fields
    def init_class(self):
        self.skinViewerSide=0
        self.currentSkin="temp_files/generated_skin.png"
        
        self.current_secondary_slider=0
        self.enabled_secondary_sliders=False

        self.latent_size=128
        self.stats = (0.5, 0.5, 0.5), (0.5, 0.5, 0.5)
        self.input_vector=randn(1,self.latent_size,1,1)

        #GAN model
        self.generator = nn.Sequential(
        # in: latent_size x 1 x 1

        nn.ConvTranspose2d(self.latent_size, 512, kernel_size=4, stride=1, padding=0, bias=False),
        nn.BatchNorm2d(512),
        nn.ReLU(True),
        # out: 512 x 4 x 4

        nn.ConvTranspose2d(512, 256, kernel_size=4, stride=2, padding=1, bias=False),
        nn.BatchNorm2d(256),
        nn.ReLU(True),
        # out: 256 x 8 x 8

        nn.ConvTranspose2d(256, 128, kernel_size=4, stride=2, padding=1, bias=False),
        nn.BatchNorm2d(128),
        nn.ReLU(True),
        # out: 128 x 16 x 16

        nn.ConvTranspose2d(128, 64, kernel_size=4, stride=2, padding=1, bias=False),
        nn.BatchNorm2d(64),
        nn.ReLU(True),
        # out: 64 x 32 x 32

        nn.ConvTranspose2d(64, 3, kernel_size=4, stride=2, padding=1, bias=False),
        nn.Tanh()
        # out: 3 x 64 x 64
        )
        self.generator.load_state_dict(load("gen_model.dat"))

        
    #create gui app
    def build(self):

        self.init_class()
        self.title="GAN Minecraft Skin Generator"
        self.icon="UI_elements/icon.png"
        
        #create ui elements
        self.root = FloatLayout(size=(960,540))
        Window.size=(960,540)

        self.bg=Image(source="UI_elements/bg.png",allow_stretch=True)

        self.skinViewer=Image(size_hint=(.75,.75),pos_hint={'x': .45,'y': .15},allow_stretch=True)

        self.turn_left=Button(text='',size_hint=(.075,.08),pos_hint={'x':.745,'y':.069},background_normal="UI_elements/turn_left.png",background_down="UI_elements/turn_left_down.png")
        self.turn_left.bind(on_press=self.turn_skinViewer_left)
        self.turn_right=Button(text='',size_hint=(.075,.08),pos_hint={'x':.83,'y':.069},background_normal="UI_elements/turn_right.png",background_down="UI_elements/turn_right_down.png")
        self.turn_right.bind(on_press=self.turn_skinViewer_right)
        self.gen_rnd=Button(text='Random',size_hint=(.07,.07),pos_hint={'x':.79,'y':.91},background_normal="UI_elements/rnd_button.png",background_down="UI_elements/rnd_button_down.png")
        self.gen_rnd.bind(on_press=self.gen_skin_rnd)
        self.exit_button=Button(text='Exit',size_hint=(0.07,0.07),pos_hint={'x':.01,'y':.01},background_normal="UI_elements/rnd_button.png",background_down="UI_elements/rnd_button_down.png")
        self.exit_button.bind(on_press=self.close_app)
        self.save_button=Button(text='Save',size_hint=(0.07,0.07),pos_hint={'x':.1,'y':.01},background_normal="UI_elements/rnd_button.png",background_down="UI_elements/rnd_button_down.png")
        self.save_button.bind(on_press=self.save_skin)

        #create sliders
        self.main_sliders=[]
        for i in range(16):
            self.main_sliders.append(MainSlider(index=i,min=-1.0,max=1.0,value=0,orientation='vertical',size_hint=(.04,.3),pos_hint={'x':0.0+(i*0.04),'y':.7},cursor_image="UI_elements/slider_handle.png"))
        
        for sl in self.main_sliders:
            sl.bind(value=self.slider_value_change)

        self.secondary_sliders=[]
        for i in range(8):
            self.secondary_sliders.append(MainSlider(index=i,min=-1.0,max=1.0,value=0,orientation='vertical',size_hint=(.04,.3),pos_hint={'x':0.15+(i*0.05),'y':.3},cursor_image="UI_elements/slider_handle.png"))

        for ss in self.secondary_sliders:
            ss.bind(value=self.secondary_value_change)

        self.disable_secondary_sliders()
        

        #create labels
        self.labels=[]
        self.labels.append(Label(text="1-8",size_hint=(.01,.01),pos_hint={'x':0.015,'y':.68},font_size=11))
        self.labels.append(Label(text="9-16",size_hint=(.01,.01),pos_hint={'x':0.055,'y':.68},font_size=11))
        self.labels.append(Label(text="17-24",size_hint=(.01,.01),pos_hint={'x':0.095,'y':.68},font_size=11))
        self.labels.append(Label(text="25-32",size_hint=(.01,.01),pos_hint={'x':0.135,'y':.68},font_size=11))
        self.labels.append(Label(text="33-40",size_hint=(.01,.01),pos_hint={'x':0.175,'y':.68},font_size=11))
        self.labels.append(Label(text="41-48",size_hint=(.01,.01),pos_hint={'x':0.215,'y':.68},font_size=11))
        self.labels.append(Label(text="49-56",size_hint=(.01,.01),pos_hint={'x':0.255,'y':.68},font_size=11))
        self.labels.append(Label(text="57-64",size_hint=(.01,.01),pos_hint={'x':0.295,'y':.68},font_size=11))
        self.labels.append(Label(text="65-72",size_hint=(.01,.01),pos_hint={'x':0.335,'y':.68},font_size=11))
        self.labels.append(Label(text="73-80",size_hint=(.01,.01),pos_hint={'x':0.375,'y':.68},font_size=11))
        self.labels.append(Label(text="81-88",size_hint=(.01,.01),pos_hint={'x':0.415,'y':.68},font_size=11))
        self.labels.append(Label(text="89-96",size_hint=(.01,.01),pos_hint={'x':0.455,'y':.68},font_size=11))
        self.labels.append(Label(text="97-104",size_hint=(.01,.01),pos_hint={'x':0.493,'y':.68},font_size=11))
        self.labels.append(Label(text="105-112",size_hint=(.01,.01),pos_hint={'x':0.536,'y':.68},font_size=11))
        self.labels.append(Label(text="113-120",size_hint=(.01,.01),pos_hint={'x':0.58,'y':.68},font_size=11))
        self.labels.append(Label(text="121-128",size_hint=(.01,.01),pos_hint={'x':0.624,'y':.68},font_size=11))

        self.current_label=Label(text='',size_hint=(.01,.01),pos_hint={'x':0.05,'y':0.55},font_size=15)

        #create more_buttons
        self.more_buttons=[]
        for i in range(16):
            self.more_buttons.append(MoreButton(index=i,text='',size_hint=(.038,.037),pos_hint={'x':0.0+(i*0.0402),'y':.63},background_normal="UI_elements/more.png",background_down="UI_elements/more_down.png"))

        for mb in self.more_buttons:
            mb.bind(on_press=self.press_more_button)

        self.root.add_widget(self.bg)
        self.root.add_widget(self.skinViewer)
        self.root.add_widget(self.turn_left)
        self.root.add_widget(self.turn_right)
        self.root.add_widget(self.gen_rnd)
        self.root.add_widget(self.current_label)
        self.root.add_widget(self.exit_button)
        self.root.add_widget(self.save_button)

        for sl in self.main_sliders:
            self.root.add_widget(sl)

        for ss in self.secondary_sliders:
            self.root.add_widget(ss)

        for lb in self.labels:
            self.root.add_widget(lb)

        for mb in self.more_buttons:
            self.root.add_widget(mb)

        self.update_skinViewer(0)
        return self.root

    #update skin preview
    def update_skinViewer(self,side):
        data=BytesIO()
        if side==0:
            prepare_image_front(self.currentSkin).save(data,format='png')
        if side==1:
            prepare_image_left(self.currentSkin).save(data,format='png')
        if side==2:
            prepare_image_back(self.currentSkin).save(data,format='png')
        
        prepare_image_right(self.currentSkin).save(data,format='png')

        #convert form PIL image to Kivy image
        data.seek(0)
        im = CoreImage(BytesIO(data.read()), ext='png')
        self.skinViewer.texture=im.texture

    #turn preview left when button pressed
    def turn_skinViewer_left(self,instance):
        self.skinViewerSide+=1
        if self.skinViewerSide==4:
            self.skinViewerSide=0
        self.update_skinViewer(self.skinViewerSide)

    #turn preview right when button pressed
    def turn_skinViewer_right(self,instance):
        self.skinViewerSide-=1
        if self.skinViewerSide==-1:
            self.skinViewerSide=3
        self.update_skinViewer(self.skinViewerSide)

    #use GAN to generate skin from seed in input_vector
    def gen_skin(self):
        fake_image=self.generator(self.input_vector)
        save_image(denorm(fake_image,self.stats),"temp_files/generated_skin.png")
        self.update_skinViewer(self.skinViewerSide)

    #fill input_vector with random numbers and generate skin
    def gen_skin_rnd(self,instance):
        self.input_vector=randn(1, self.latent_size, 1, 1)
        fake_image=self.generator(self.input_vector)
        save_image(denorm(fake_image,self.stats),"temp_files/generated_skin.png")
        self.update_skinViewer(self.skinViewerSide)

    #save png with skin
    def save_skin(self,instance):
        shutil.copyfile("temp_files/generated_skin.png","generated_skin.png")

    #when main slider moved change input_vector
    def slider_value_change(self,instance,value):
        var=(instance.index)*8
        for i in range(var,var+7):
            self.input_vector[0,i,0,0]=value
        self.gen_skin()

    #hide secondary sliders
    def disable_secondary_sliders(self):
        for ss in self.secondary_sliders:
            ss.disabled=True
            ss.opacity=0.0

    #unhide secondary sliders
    def enable_secondary_sliders(self):
        for ss in self.secondary_sliders:
            ss.disabled=False
            ss.opacity=1.0

    #when more_button is pressed change secondary sliders
    def press_more_button(self,instance):
        if self.enabled_secondary_sliders==True:
            if instance.index==self.current_secondary_slider:
                self.enabled_secondary_sliders=False
                self.disable_secondary_sliders()
                self.update_current_label(-1)
            else:
                self.current_secondary_slider=instance.index
                self.update_current_label(instance.index)
                
        else:
            self.enabled_secondary_sliders=True
            self.current_secondary_slider=instance.index
            self.update_current_label(instance.index)
            self.enable_secondary_sliders()
            

    #when secondary slider moved change input_vector
    def secondary_value_change(self,instance,value):
        var=(self.current_secondary_slider*8)+instance.index
        self.input_vector[0,var,0,0]=value
        self.gen_skin()

    #change label to current secondary sliders
    def update_current_label(self,idx):
        if idx==-1:
            self.current_label.text=''
            return
        s=str((idx*8)+1)
        s+='-'
        s+=str((idx*8)+8)
        self.current_label.text=s

    #exit app
    def close_app(self,instance):
        self.stop()
        
#run the app
if __name__ == '__main__':
    MainApp().run()